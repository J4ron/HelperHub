@page "/"
@using System.IO
@using RFE.Components.Data
@rendermode InteractiveServer
@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container">
    <div class="row">
        <div class="col-3 border-end border-secondary" style="height: 100vh; overflow-y: auto;">
            <h5 class="text-white-50">Explorer</h5>
            <hr />
            <ul class="list-group">
                @foreach (var item in RootFolderItems)
                {
                    <li class="list-group-item bg-black bg-dark text-white-50 border-0 border-bottom border-secondary" style="cursor: pointer;" @onclick="() => _handledatacontent.ToggleFolder(item)">
                        @if (item.IsDirectory)
                        {
                            <i class="bi @(item.IsExpanded ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                            <i style="margin-left: 0.2em; user-select: none" class="bi bi-folder-fill text-warning"></i>
                            <a class="text-dark text-decoration-none text-white text-break" style="margin-left: 0.5em; user-select: none">@item.Name</a>
                        }
                        else
                        {
                            <i class="bi bi-file-earmark-text"></i>
                            <a class="text-dark text-decoration-none text-white text-break" style="margin-left: 0.5em;">@item.Name</a>
                        }
                    </li>
                    @if (item.IsExpanded && item.SubItems.Any())
                    {
                        <ul class="list-group ms-3">
                            @_renderContent.RenderSubFolders(item.SubItems)
                        </ul>
                    }
                }
            </ul>
        </div>
        
        <div class="col-9 text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5>Content</h5>
                @if (!string.IsNullOrEmpty(CurrentFilePath))
                {
                    <div class="btn-group" role="group" aria-label="Basic example">
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary" @onclick="OpenRawView">Raw</button>
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary" @onclick="CopyFileContentToClipboard"><i class="bi bi-clipboard2"></i></button>
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary" @onclick="DownloadFile"><i class="bi bi-file-earmark-arrow-down"></i></button>
                    </div>
                }
            </div>

            <hr />

            @if (!string.IsNullOrEmpty(CurrentFilePath) && IsImageFile(CurrentFilePath))
            {
                <img src="http://raw.skeptic-systems.de/api/Image/GetImage?relativePath=@CurrentFilePath" class="img-fluid" alt="Image" />
            }
            else if (!string.IsNullOrEmpty(CurrentFilePath) && IsMp3File(CurrentFilePath))
            {
                <audio controls preload="auto" src="http://raw.skeptic-systems.de/api/Audio/GetAudio?relativePath=@CurrentFilePath"></audio>
            }
            else if (!string.IsNullOrEmpty(FileContent))
            {
                <pre style="white-space: pre-wrap;">@FileContent</pre>
            }
            else
            {
                <div class="alert alert-dark w-50 lh-1" role="alert">
                    <i class="bi bi-info-circle"><p>select a file to view its content.</p></i>
                </div>
            }
        </div>
    </div>
</div>

@code {
    public List<Home.FileSystemItem> RootFolderItems = new();
    public string RootPath = string.Empty;
    public string? CurrentFilePath = null;
    public string? FileContent = null;


    public Home()
    {
        _handledatacontent = new HandleDataContent(this);
        _renderContent = new RenderContent(this);
    }
    
    internal readonly HandleDataContent _handledatacontent;
    private readonly RenderContent _renderContent;
    
    protected override async Task OnInitializedAsync()
    {
        var settings = await SettingsService.LoadSettingsAsync();
        RootPath = settings.FolderPath;

        if (!string.IsNullOrEmpty(RootPath) && Directory.Exists(RootPath))
        {
            _handledatacontent.LoadFolderItems(RootPath);
        }
        else
        {
            FileContent = "Invalid folder path in settings. Please update your settings.";
        }
    }
    
    private async Task DownloadFile()
    {
        if (!string.IsNullOrEmpty(CurrentFilePath))
        {
            var filePath = Path.Combine(RootPath, CurrentFilePath);
        
            if (File.Exists(filePath))
            {
                var fileName = Path.GetFileName(CurrentFilePath);
                var fileBytes = await File.ReadAllBytesAsync(filePath);
                var base64File = Convert.ToBase64String(fileBytes);
                var mimeType = "application/octet-stream";

                await JS.InvokeVoidAsync("downloadFileFromBase64", base64File, fileName, mimeType);
            }
            else
            {
              //soon
            }
        }
    }

    
    private void OpenRawView()
    {
        if (!string.IsNullOrEmpty(CurrentFilePath))
        {
            try
            {
                var rawUrl = $"http://raw.skeptic-systems.de/api/Raw/GetRawText?relativePath={Uri.EscapeDataString(CurrentFilePath)}";
                
                NavigationManager.NavigateTo(rawUrl, forceLoad: true);
            }
            catch (Exception ex)
            {
                FileContent = $"Error opening raw text URL: {ex.Message}";
            }
        }
    }

    public bool IsImageFile(string filePath)
    {
        var extension = Path.GetExtension(filePath).ToLower();
        return extension == ".png" || extension == ".jpg" || extension == ".jpeg" || extension == ".gif";
    }
    
    private bool IsMp3File(string filePath)
    {
        if (string.IsNullOrEmpty(filePath))
        {
            return false;
        }
        return Path.GetExtension(filePath)?.ToLower() == ".mp3";
    }
    
    public class FileSystemItem
    {
        public string Path { get; set; }
        public string Name { get; set; }
        public bool IsDirectory { get; set; }
        public List<Home.FileSystemItem> SubItems { get; set; } = new();
        public bool IsExpanded { get; set; } = false;
    }

    private async Task CopyFileContentToClipboard()
    {
        if (!string.IsNullOrEmpty(CurrentFilePath))
        {
            var filePath = Path.Combine(RootPath, CurrentFilePath);
            
            if (File.Exists(filePath))
            {
                var fileContent = await File.ReadAllTextAsync(filePath);
                
                await JS.InvokeVoidAsync("copyTextToClipboard", fileContent);
            }
            else
            {
                //soon
            }
        }
    }
}