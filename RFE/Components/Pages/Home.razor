@page "/"
@using System.IO
@using RFE.Components.Data
@rendermode InteractiveServer
@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-3 border-end" style="height: 100vh; overflow-y: auto;">
            <h5>File Explorer</h5>
            <hr />
            <ul class="list-group">
                @foreach (var item in RootFolderItems)
                {
                <li class="list-group-item" style="cursor: pointer;" @onclick="() => ToggleFolder(item)">
                    @if (item.IsDirectory)
                    {
                        if (!item.IsExpanded)
                        {
                        <i class="bi bi-caret-right-fill"></i>
                        }
                        else
                        {
                        <i class="bi bi-caret-down-fill"></i>
                        }
                        <i style="margin-left: 0.5em; user-select: none" class="bi bi-folder-fill text-warning"></i>
                        <a class="text-dark text-decoration-none" style="margin-left: 0.5em; user-select: none">@item.Name</a>
                    }
                    else
                    {
                        <i class="bi bi-file-earmark-text"></i> <a class="text-dark text-decoration-none" style="margin-left: 0.5em;">@item.Name</a>
                    }
                </li>
                @if (item.IsExpanded)
                {
                    <ul class="list-group ms-3">
                        @foreach (var subItem in item.SubItems)
                        {
                        <li class="list-group-item" style="cursor: pointer;" @onclick="() => ToggleFolder(subItem)">
                            @if (subItem.IsDirectory)
                            {
                                @if (subItem.IsExpanded)
                                {
                                    <i class="bi bi-caret-down-fill"></i>
                                }
                                else
                                {
                                    <i class="bi bi-caret-right-fill"></i>
                                }
                                <i style="margin-left: 0.5em; user-select: none" class="bi bi-folder-fill text-warning"></i>
                                <a class="text-dark text-decoration-none" style="margin-left: 0.5em; user-select: none">@subItem.Name</a>
                            }
                            else
                            {
                                <i class="bi bi-file-earmark-text"></i> <a class="text-dark text-decoration-none" style="margin-left: 0.5em;">@subItem.Name</a>
                            }
                        </li>
                        @if (subItem.IsExpanded)
                        {
                            <ul class="list-group ms-3">
                                @foreach (var subSubItem in subItem.SubItems)
                                {
                                    <li class="list-group-item" style="cursor: pointer;" @onclick="() => ToggleFolder(subSubItem)">
                                        @if (subSubItem.IsDirectory)
                                        {
                                            @if (subSubItem.IsExpanded)
                                            {
                                                <i class="bi bi-caret-down-fill"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-caret-right-fill"></i>
                                            }
                                            <i style="margin-left: 0.5em; user-select: none" class="bi bi-folder-fill text-warning"></i>
                                            <a class="text-dark text-decoration-none" style="margin-left: 0.5em; user-select: none">@subSubItem.Name</a>
                                        }
                                        else
                                        {
                                            <i class="bi bi-file-earmark-text"></i> <a class="text-dark text-decoration-none" style="margin-left: 0.5em;">@subSubItem.Name</a>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                        }
                    </ul>
                }
                }
            </ul>
        </div>

        <div class="col-9 bg-dark text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5>File Content</h5>
                @if (!string.IsNullOrEmpty(CurrentFilePath))
                {
                <button class="btn btn-secondary" @onclick="OpenRawView">
                    Raw View
                </button>
                }
            </div>

            <hr />

            @if (FileContent == null && !string.IsNullOrEmpty(CurrentFilePath) && Path.GetExtension(CurrentFilePath).ToLower() == ".png")
            {
            <img src="@CurrentFilePath" class="img-fluid" alt="PNG Image" />
            }
            else if (!string.IsNullOrEmpty(FileContent))
            {
            <pre style="white-space: pre-wrap;">@FileContent</pre>
            }
            else
            {
            <p>Please select a file to view its content.</p>
            }
        </div>
    </div>
</div>

@code {
private List<FileSystemItem> RootFolderItems = new();
private string RootPath = string.Empty;
private string? CurrentFilePath = null;
private string? FileContent = null;

protected override async Task OnInitializedAsync()
{
var settings = await SettingsService.LoadSettingsAsync();
RootPath = settings.FolderPath;

if (!string.IsNullOrEmpty(RootPath) && Directory.Exists(RootPath))
{
    LoadFolderItems(RootPath);
}
else
{
    FileContent = "Invalid folder path in settings. Please update your settings.";
}
}

private void LoadFolderItems(string path)
{
try
{
    var directoryItems = Directory.GetFileSystemEntries(path);
    RootFolderItems = directoryItems.Select(item => new FileSystemItem
    {
        Path = item,
        Name = Path.GetFileName(item),
        IsDirectory = Directory.Exists(item),
        SubItems = new List<FileSystemItem>()
    }).ToList();
    
    RootFolderItems = RootFolderItems.OrderBy(item => item.IsDirectory ? 0 : 1).ToList();

    foreach (var folderItem in RootFolderItems.Where(item => item.IsDirectory))
    {
        LoadSubItems(folderItem);
    }
}
catch (Exception ex)
{
    FileContent = $"Error loading directory: {ex.Message}";
}
}

private void LoadSubItems(FileSystemItem folderItem)
{
try
{
    var subItems = Directory.GetFileSystemEntries(folderItem.Path);
    folderItem.SubItems = subItems.Select(subItem => new FileSystemItem
    {
        Path = subItem,
        Name = Path.GetFileName(subItem),
        IsDirectory = Directory.Exists(subItem),
        SubItems = new List<FileSystemItem>()
    }).ToList();
    
    folderItem.SubItems = folderItem.SubItems.OrderBy(item => item.IsDirectory ? 1 : 0).ToList();

    foreach (var subFolderItem in folderItem.SubItems.Where(item => item.IsDirectory))
    {
        LoadSubItems(subFolderItem);
    }
}
catch (Exception ex)
{
    FileContent = $"Error loading subfolder: {ex.Message}";
}
}

private void ToggleFolder(FileSystemItem item)
{
    if (item.IsDirectory)
    { 
        item.IsExpanded = !item.IsExpanded;
    }
    else if (!item.IsDirectory)
    {
        LoadFileContent(item);
    }
    else
    {
        FileContent = "Du hast versucht, ein Verzeichnis zu öffnen, das außerhalb des erlaubten Bereichs liegt.";
    }
}

private bool IsValidPath(string path)
{
    var fullPath = Path.GetFullPath(path);
    return fullPath.StartsWith(Path.GetFullPath(RootPath), StringComparison.OrdinalIgnoreCase);
}

private void LoadFileContent(FileSystemItem item)
{
try
{
    CurrentFilePath = item.Path;

    if (Path.GetExtension(item.Name).ToLower() == ".png")
    {
        FileContent = null;
    }
    else
    {
        FileContent = File.ReadAllText(item.Path);
    }
}
catch (Exception ex)
{
    FileContent = $"Error loading file: {ex.Message}";
}
}

private void OpenRawView()
{
if (!string.IsNullOrEmpty(CurrentFilePath))
{
    var rawUrl = $"{NavigationManager.BaseUri}raw?file={Uri.EscapeDataString(CurrentFilePath)}";
    NavigationManager.NavigateTo(rawUrl, forceLoad: true);
}
}

public class FileSystemItem
{
    public string Path { get; set; }
    public string Name { get; set; }
    public bool IsDirectory { get; set; }
    public List<FileSystemItem> SubItems { get; set; } = new List<FileSystemItem>();
    public bool IsExpanded { get; set; } = false;
}
}
