@page "/"
@using System.IO
@using RFE.Components.Data
@rendermode InteractiveServer

@inject ISettingsService SettingsService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IConfiguration Configuration

<div class="container">
    <div class="row">

        <div class="col-9 text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5>Content</h5>
                @if (!string.IsNullOrEmpty(CurrentFilePath))
                {
                    <div class="btn-group" role="group" aria-label="Basic example">
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary" @onclick="OpenRawView">Raw</button>
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary"><i class="bi bi-clipboard2"></i></button>
                        <button type="button" class="text-white-50 btn btn-outline-dark btn-secondary"><i class="bi bi-file-earmark-arrow-down"></i></button>
                    </div>
                }
            </div>

            <hr />

            @if (!string.IsNullOrEmpty(CurrentFilePath) && IsImageFile(CurrentFilePath))
            {
                <img src="@($"{BaseUrl}/api/Image/GetImage?relativePath={CurrentFilePath}")" class="img-fluid" alt="Image" />
            }
            else if (!string.IsNullOrEmpty(CurrentFilePath) && IsMp3File(CurrentFilePath))
            {
                <audio controls preload="auto" src="@($"{BaseUrl}/api/Audio/GetAudio?relativePath={CurrentFilePath}")"></audio>
            }
            else if (!string.IsNullOrEmpty(FileContent))
            {
                <pre style="white-space: pre-wrap;">@FileContent</pre>
            }
            else
            {
                <div class="alert alert-dark w-50 lh-1" role="alert">
                    <i class="bi bi-info-circle"><p>select a file to view its content.</p></i>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<FileSystemItem> RootFolderItems = new();
    private string RootPath = string.Empty;
    private string? CurrentFilePath = null;
    private string? FileContent = null;

    // Das ist die wichtige Variable fÃ¼r deine Docker-Compose-URL
    private string BaseUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Hole die Umgebungsvariable "URL" oder nutze einen Fallback
        BaseUrl = Configuration["URL"] ?? "http://localhost:5051";

        var settings = await SettingsService.LoadSettingsAsync();
        RootPath = settings.FolderPath;

        if (!string.IsNullOrEmpty(RootPath) && Directory.Exists(RootPath))
        {
            LoadFolderItems(RootPath);
        }
        else
        {
            FileContent = "Invalid folder path in settings. Please update your settings.";
        }
    }

    private void LoadFolderItems(string path)
    {
        try
        {
            var directoryItems = Directory.GetFileSystemEntries(path);
            RootFolderItems = directoryItems.Select(item => new FileSystemItem
            {
                Path = item,
                Name = Path.GetFileName(item),
                IsDirectory = Directory.Exists(item),
                SubItems = new List<FileSystemItem>()
            }).ToList();

            RootFolderItems = RootFolderItems.OrderBy(item => item.IsDirectory ? 0 : 1).ToList();
        }
        catch (Exception ex)
        {
            FileContent = $"Error loading directory: {ex.Message}";
        }
    }

    private void ToggleFolder(FileSystemItem item)
    {
        if (item.IsDirectory)
        {
            if (!item.IsExpanded)
            {
                if (!item.SubItems.Any())
                {
                    LoadSubItems(item);
                }
            }
            item.IsExpanded = !item.IsExpanded;
        }
        else
        {
            LoadFileContent(item);
        }
    }

    private void LoadSubItems(FileSystemItem folderItem)
    {
        try
        {
            var subItems = Directory.GetFileSystemEntries(folderItem.Path);
            folderItem.SubItems = subItems.Select(subItem => new FileSystemItem
            {
                Path = subItem,
                Name = Path.GetFileName(subItem),
                IsDirectory = Directory.Exists(subItem),
                SubItems = new List<FileSystemItem>()
            }).ToList();

            folderItem.SubItems = folderItem.SubItems.OrderBy(x => x.IsDirectory ? 0 : 1).ToList();
        }
        catch (Exception ex)
        {
            FileContent = $"Error loading subfolder: {ex.Message}";
        }
    }

    private void LoadFileContent(FileSystemItem item)
    {
        try
        {
            CurrentFilePath = item.Path;

            if (IsImageFile(item.Path))
            {
                FileContent = null;
            }
            else
            {
                FileContent = File.ReadAllText(item.Path);
            }
        }
        catch (Exception ex)
        {
            FileContent = $"Error loading file: {ex.Message}";
        }
    }

    private bool IsImageFile(string filePath)
    {
        var extension = Path.GetExtension(filePath).ToLower();
        return extension is ".png" or ".jpg" or ".jpeg" or ".gif";
    }

    private bool IsMp3File(string filePath)
    {
        if (string.IsNullOrEmpty(filePath))
        {
            return false;
        }
        return Path.GetExtension(filePath)?.ToLower() == ".mp3";
    }

    private void OpenRawView()
    {
        if (!string.IsNullOrEmpty(CurrentFilePath))
        {
            try
            {
                var rawUrl = $"{BaseUrl}/api/Raw/GetRawText?relativePath={Uri.EscapeDataString(CurrentFilePath)}";
                NavigationManager.NavigateTo(rawUrl, forceLoad: true);
            }
            catch (Exception ex)
            {
                FileContent = $"Error opening raw text URL: {ex.Message}";
            }
        }
    }

    private RenderFragment RenderSubFolders(List<FileSystemItem> subItems) => builder =>
    {
        foreach (var subItem in subItems)
        {
            builder.OpenElement(0, "li");
            builder.AddAttribute(1, "class", "list-group-item");
            builder.AddAttribute(2, "style", "cursor: pointer;");
            builder.AddAttribute(3, "onclick", EventCallback.Factory.Create(this, () => ToggleFolder(subItem)));

            if (subItem.IsDirectory)
            {
                builder.OpenElement(4, "i");
                builder.AddAttribute(5, "class", $"bi {(subItem.IsExpanded ? "bi-caret-down-fill" : "bi-caret-right-fill")}");
                builder.CloseElement();

                builder.OpenElement(6, "i");
                builder.AddAttribute(7, "class", "bi bi-folder-fill text-warning");
                builder.AddAttribute(8, "style", "margin-left: 0.5em; user-select: none");
                builder.CloseElement();

                builder.AddContent(9, subItem.Name);
            }
            else
            {
                builder.OpenElement(10, "i");
                builder.AddAttribute(11, "class", "bi bi-file-earmark-text");
                builder.CloseElement();

                builder.AddContent(12, subItem.Name);
            }

            builder.CloseElement();

            if (subItem.IsExpanded && subItem.SubItems.Any())
            {
                builder.OpenElement(13, "ul");
                builder.AddAttribute(14, "class", "list-group ms-3");
                builder.AddContent(15, RenderSubFolders(subItem.SubItems));
                builder.CloseElement();
            }
        }
    };

    public class FileSystemItem
    {
        public string Path { get; set; }
        public string Name { get; set; }
        public bool IsDirectory { get; set; }
        public List<FileSystemItem> SubItems { get; set; } = new();
        public bool IsExpanded { get; set; } = false;
    }
}
